=> install
npm install
npm install -g @angular/cli
ng new nom-du-projet

--------------------------------------

=> Serveur
ng serve

--------------------------------------

=> Generations
ng generate component nom-du-composant
ng generate service nom-du-service
ng generate module nom-du-module
ng generate directive nom-de-la-directive
ng generate pipe nom-du-pipe

--------------------------------------

=> Tests et Build
tests unitaires : ng test
tests end-to-end : ng e2e
Compiler le projet pour la production : ng build --prod

--------------------------------------

=> Update
ng update @angular/cli @angular/core

--------------------------------------

=> Autres
ng help

--------------------------------------

Composant : Partie de l'UI, gère la logique et la vue.
Service : Encapsule la logique métier, utilisé pour des fonctionnalités partagées.
Module : Conteneur organisant composants, directives, pipes et services.
Directive : Modifie le comportement ou l'apparence des éléments DOM.
Pipe : Transforme les données avant leur affichage dans la vue.

================================

Composant (Component)
Un composant est l'élément de base d'une application Angular. Il encapsule la logique et la vue d'une partie de l'interface utilisateur (UI).

Structure : Un composant est constitué de quatre parties principales : une classe TypeScript, un template HTML, une feuille de style CSS (ou SCSS), et des métadonnées (annotations).
Usage : Un composant est utilisé pour créer et gérer une section spécifique de l'UI, comme un bouton, une liste, un formulaire, etc.

================================

Service
Un service est une classe utilisée pour encapsuler la logique métier et les fonctionnalités qui ne sont pas directement liées à la présentation.

Structure : Un service est généralement une classe simple annotée avec @Injectable.
Usage : Les services sont utilisés pour gérer des tâches comme les appels HTTP, la manipulation de données, la logique d'authentification, etc.

================================

Module
Un module est un conteneur qui regroupe des composants, des directives, des pipes et des services liés.

Structure : Un module est une classe annotée avec @NgModule.
Usage : Les modules organisent l'application en unités fonctionnelles, permettant une gestion et une maintenance plus faciles.

================================

Directive
Une directive est une classe qui peut modifier le comportement ou l'apparence des éléments DOM.

Structure : Une directive est une classe annotée avec @Directive.
Usage : Les directives sont utilisées pour manipuler le DOM, appliquer des styles conditionnels, ou ajouter des fonctionnalités supplémentaires à des éléments existants.

================================

Pipe
Un pipe est une classe utilisée pour transformer les données avant de les afficher dans la vue.

Structure : Un pipe est une classe annotée avec @Pipe.
Usage : Les pipes sont utilisés pour formater les dates, les devises, ou pour effectuer des transformations sur les chaînes de caractères, les nombres, etc.

================================

@Input() 
Est utilisé pour déclarer des propriétés d'entrée dans un composant, permettant aux composants 
parents de fournir des valeurs à ces propriétés.

@HostBinding()
Est utilisé pour lier des propriétés du composant à des propriétés de l'élément DOM hôte du composant, 
permettant de modifier dynamiquement les attributs de l'élément DOM en fonction de l'état ou des propriétés du composant. 

Ces deux sont très utiles dans le développement Angular pour créer des composants flexibles et dynamiques.

================================
================================

@Component({
  selector: "app-example",
  templateUrl: "./example.component.html",
  styleUrls: ["./example.component.css"],
})
export class ExampleComponent {
  // Logic here
}

//============================================

@Injectable({
  providedIn: "root",
})
export class ExampleService {
  // Business logic here
}

//============================================

@NgModule({
  declarations: [ExampleComponent, ExampleDirective, ExamplePipe],
  imports: [CommonModule],
  providers: [ExampleService],
  bootstrap: [AppComponent],
})
export class ExampleModule {}

//============================================

@Directive({
  selector: "[appExample]",
})
export class ExampleDirective {
  // DOM manipulation logic here
}

//============================================

@Pipe({
  name: "example",
})
export class ExamplePipe implements PipeTransform {
  transform(value: any, ...args: any[]): any {
    // Transformation logic here
    return transformedValue;
  }
}

//============================================

ngOnChanges
Quand il est appelé : À chaque fois qu'une des propriétés d'entrée liées à un composant change.
Cas d'usage : Utilisé pour réagir aux modifications des entrées (@Input properties). 
Par exemple, si votre composant dépend de données passées par un parent, 
vous pouvez utiliser ce hook pour mettre à jour les valeurs internes du composant en réponse aux changements.

ngOnInit
Quand il est appelé : Une seule fois, après la première initialisation des propriétés liées aux entrées du composant.
Cas d'usage : Utilisé pour initialiser les données du composant. Idéal pour récupérer des données à partir d'un service ou initialiser des propriétés.

ngDoCheck
Quand il est appelé : À chaque cycle de détection des changements. Utilisé pour détecter et agir sur les changements que Angular ne peut pas détecter.
Cas d'usage : Utilisé pour implémenter une logique de détection de changements personnalisée.

ngAfterContentInit
Quand il est appelé : Une seule fois, après la projection du contenu dans le composant.
Cas d'usage : Utilisé pour toute initialisation dépendante du contenu projeté (utilisation de ng-content).

ngAfterContentChecked
Quand il est appelé : Après chaque vérification du contenu projeté.
Cas d'usage : Utilisé pour réagir aux modifications du contenu projeté après chaque vérification de changement.

ngAfterViewInit
Quand il est appelé : Une seule fois, après l'initialisation des vues du composant.
Cas d'usage : Utilisé pour toute initialisation dépendante de la vue du composant, comme la manipulation directe du DOM.

ngAfterViewChecked
Quand il est appelé : Après chaque vérification de la vue du composant.
Cas d'usage : Utilisé pour réagir aux modifications de la vue après chaque vérification de changement.

ngOnDestroy
Quand il est appelé : Juste avant que le composant soit détruit.
Cas d'usage : Utilisé pour effectuer des tâches de nettoyage, comme la désinscription d'observables ou la libération de ressources.

==============================

Signal

Les primitives =>
signal : valeur en lecture et écriture
computed : lecture seule, valeur calculée sur base d'autres signaux
effect : fonction arbitraire évaluée lors de changements des signaux utilisés